// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(HelpdeskDbContext))]
    [Migration("20250520121405_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Messaging.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MessageThreadId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TimeLastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatedId")
                        .HasColumnType("text");

                    b.Property<string>("UserLastModifiedId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MessageThreadId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserLastModifiedId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Domain.Messaging.MessageThread", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TimeLastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatedId")
                        .HasColumnType("text");

                    b.Property<string>("UserLastModifiedId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserLastModifiedId");

                    b.ToTable("Threads");
                });

            modelBuilder.Entity("Domain.Ticket.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("HierarchyId")
                        .HasColumnType("uuid");

                    b.Property<string>("SolverId")
                        .HasColumnType("text");

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TimeLastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserCreatedId")
                        .HasColumnType("text");

                    b.Property<string>("UserLastModifiedId")
                        .HasColumnType("text");

                    b.Property<int>("WFState")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HierarchyId");

                    b.HasIndex("SolverId");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserLastModifiedId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Domain.Ticket.TicketChanges.SolverChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("SolverId")
                        .HasColumnType("text");

                    b.Property<Guid?>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TicketTransitionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TimeLastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatedId")
                        .HasColumnType("text");

                    b.Property<string>("UserLastModifiedId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SolverId");

                    b.HasIndex("TicketId");

                    b.HasIndex("TicketTransitionId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserLastModifiedId");

                    b.ToTable("SolverChanges");
                });

            modelBuilder.Entity("Domain.Ticket.TicketChanges.TicketChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<string>("AuthorId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TicketId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TimeLastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserCreatedId")
                        .HasColumnType("text");

                    b.Property<string>("UserLastModifiedId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("UserLastModifiedId");

                    b.ToTable("TicketChanges");
                });

            modelBuilder.Entity("Domain.User.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Messaging.Message", b =>
                {
                    b.HasOne("Domain.Messaging.MessageThread", null)
                        .WithMany("Messages")
                        .HasForeignKey("MessageThreadId");

                    b.HasOne("Domain.User.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("Domain.User.User", "UserLastModified")
                        .WithMany()
                        .HasForeignKey("UserLastModifiedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserLastModified");
                });

            modelBuilder.Entity("Domain.Messaging.MessageThread", b =>
                {
                    b.HasOne("Domain.User.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("Domain.User.User", "UserLastModified")
                        .WithMany()
                        .HasForeignKey("UserLastModifiedId");

                    b.Navigation("UserCreated");

                    b.Navigation("UserLastModified");
                });

            modelBuilder.Entity("Domain.Ticket.Ticket", b =>
                {
                    b.HasOne("Domain.Ticket.Ticket", "Hierarchy")
                        .WithMany()
                        .HasForeignKey("HierarchyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User.User", "Solver")
                        .WithMany()
                        .HasForeignKey("SolverId");

                    b.HasOne("Domain.Messaging.MessageThread", "Thread")
                        .WithMany()
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("Domain.User.User", "UserLastModified")
                        .WithMany()
                        .HasForeignKey("UserLastModifiedId");

                    b.Navigation("Hierarchy");

                    b.Navigation("Solver");

                    b.Navigation("Thread");

                    b.Navigation("UserCreated");

                    b.Navigation("UserLastModified");
                });

            modelBuilder.Entity("Domain.Ticket.TicketChanges.SolverChange", b =>
                {
                    b.HasOne("Domain.User.User", "Solver")
                        .WithMany()
                        .HasForeignKey("SolverId");

                    b.HasOne("Domain.Ticket.Ticket", null)
                        .WithMany("SolverChanges")
                        .HasForeignKey("TicketId");

                    b.HasOne("Domain.Ticket.TicketChanges.TicketChange", "TicketTransition")
                        .WithMany()
                        .HasForeignKey("TicketTransitionId");

                    b.HasOne("Domain.User.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("Domain.User.User", "UserLastModified")
                        .WithMany()
                        .HasForeignKey("UserLastModifiedId");

                    b.Navigation("Solver");

                    b.Navigation("TicketTransition");

                    b.Navigation("UserCreated");

                    b.Navigation("UserLastModified");
                });

            modelBuilder.Entity("Domain.Ticket.TicketChanges.TicketChange", b =>
                {
                    b.HasOne("Domain.User.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("Domain.Ticket.Ticket", null)
                        .WithMany("TicketChanges")
                        .HasForeignKey("TicketId");

                    b.HasOne("Domain.User.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId");

                    b.HasOne("Domain.User.User", "UserLastModified")
                        .WithMany()
                        .HasForeignKey("UserLastModifiedId");

                    b.Navigation("Author");

                    b.Navigation("UserCreated");

                    b.Navigation("UserLastModified");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Messaging.MessageThread", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Domain.Ticket.Ticket", b =>
                {
                    b.Navigation("SolverChanges");

                    b.Navigation("TicketChanges");
                });
#pragma warning restore 612, 618
        }
    }
}
